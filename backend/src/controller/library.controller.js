// backend/controller/library.controller.js

import mongoose from "mongoose";
import { Library } from "../models/library.model.js"; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–ª—å–±–æ–º—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getLibraryAlbums = async (req, res, next) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const library = await Library.findOne({ userId }).populate(
      "albums.albumId"
    );

    if (!library) {
      return res.json({ albums: [] });
    }

    const albums = library.albums
      .map((a) => ({
        ...a.albumId._doc,
        addedAt: a.addedAt,
      }))
      .sort(
        (a, b) => new Date(b.addedAt).getTime() - new Date(a.addedAt).getTime()
      ); // –î–æ–±–∞–≤–∏–ª .getTime() –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

    res.json({ albums });
  } catch (err) {
    next(err);
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–Ω—É—Ç—ã–µ –ø–µ—Å–Ω–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getLikedSongs = async (req, res, next) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const library = await Library.findOne({ userId }).populate({
      path: "likedSongs.songId", // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É—Ç—å –∫ –ø–æ–ª—é, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ populate –¥–ª—è –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–µ—Å–µ–Ω
      model: "Song", // –ú–æ–¥–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å—Å—ã–ª–∞–µ—Ç—Å—è songId
    });

    if (!library) {
      return res.json({ songs: [] });
    }

    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ addedAt –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç
    const songs = library.likedSongs
      .sort(
        (a, b) => new Date(b.addedAt).getTime() - new Date(a.addedAt).getTime()
      )
      .map((item) => ({
        ...item.songId._doc, // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
        likedAt: item.addedAt, // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ª–∞–π–∫–∞
      }));

    res.json({ songs });
  } catch (err) {
    next(err);
  }
};

// –¢–æ–≥–≥–ª –∞–ª—å–±–æ–º–∞ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–ª—å–±–æ–º)
export const toggleAlbumInLibrary = async (req, res, next) => {
  try {
    console.log("‚ñ∂Ô∏è toggleAlbumInLibrary called with:", req.body);

    const userId = req.user?.id;
    console.log("UserId from req.user:", userId);
    const { albumId } = req.body;

    if (!userId || !albumId) {
      return res.status(400).json({ message: "Missing userId or albumId" });
    }

    if (!mongoose.Types.ObjectId.isValid(albumId)) {
      return res.status(400).json({ message: "Invalid albumId format" });
    }

    const library = await Library.findOneAndUpdate(
      { userId },
      {},
      { upsert: true, new: true }
    );

    const exists = library.albums.some(
      (a) => a.albumId?.toString() === albumId
    );

    if (exists) {
      library.albums = library.albums.filter(
        (a) => a.albumId?.toString() !== albumId
      );
    } else {
      library.albums.push({
        albumId: new mongoose.Types.ObjectId(albumId),
        addedAt: new Date(),
      });
    }

    await library.save();

    res.json({ success: true, isAdded: !exists }); // –î–æ–±–∞–≤–∏–ª isAdded –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  } catch (err) {
    console.error("‚ùå toggleAlbumInLibrary error:", err);
    next(err);
  }
};

// –¢–æ–≥–≥–ª –ª–∞–π–∫–∞ –ø–µ—Å–Ω–∏ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ likedSongs)
export const toggleSongLikeInLibrary = async (req, res, next) => {
  try {
    const userId = req.user?.id;
    const { songId } = req.body;

    if (!userId || !songId) {
      return res.status(400).json({ message: "Missing userId or songId" });
    }

    if (!mongoose.Types.ObjectId.isValid(songId)) {
      return res.status(400).json({ message: "Invalid songId format" });
    }

    const library = await Library.findOneAndUpdate(
      { userId },
      {},
      { upsert: true, new: true }
    );

    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ songId –≤ –º–∞—Å—Å–∏–≤–µ likedSongs (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
    const exists = library.likedSongs.some(
      (s) => s.songId?.toString() === songId
    );

    if (exists) {
      // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º likedSongs
      library.likedSongs = library.likedSongs.filter(
        (s) => s.songId?.toString() !== songId
      );
    } else {
      // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ likedSongs
      library.likedSongs.push({
        songId: new mongoose.Types.ObjectId(songId),
        addedAt: new Date(),
      });
    }

    await library.save();

    res.json({ success: true, isLiked: !exists }); // –î–æ–±–∞–≤–∏–ª isLiked –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  } catch (err) {
    console.error("‚ùå toggleSongLikeInLibrary error:", err);
    next(err);
  }
};
