import mongoose from "mongoose";
import { Library } from "../models/library.model.js";

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–ª—å–±–æ–º—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getLibraryAlbums = async (req, res, next) => {
  try {
    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º req.user.id
    const userId = req.user?.id;
    if (!userId) {
      // –≠—Ç–æ –ø–æ –∏–¥–µ–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ protectRoute –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
      return res.status(401).json({ message: "Unauthorized" });
    }

    const library = await Library.findOne({ userId }).populate(
      "albums.albumId"
    );

    if (!library) {
      return res.json({ albums: [] });
    }

    const albums = library.albums
      .map((a) => ({
        ...a.albumId._doc,
        addedAt: a.addedAt,
      }))
      .sort((a, b) => new Date(b.addedAt) - new Date(a.addedAt));

    res.json({ albums });
  } catch (err) {
    next(err);
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–Ω—É—Ç—ã–µ –ø–µ—Å–Ω–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getLikedSongs = async (req, res, next) => {
  try {
    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º req.user.id
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const library = await Library.findOne({ userId }).populate("songs.songId");

    if (!library) {
      return res.json({ songs: [] });
    }

    const songs = library.songs
      .map((s) => ({
        ...s.songId._doc,
        addedAt: s.addedAt,
      }))
      .sort((a, b) => new Date(b.addedAt) - new Date(a.addedAt));

    res.json({ songs });
  } catch (err) {
    next(err);
  }
};

// –¢–æ–≥–≥–ª –∞–ª—å–±–æ–º–∞ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–ª—å–±–æ–º)
export const toggleAlbumInLibrary = async (req, res, next) => {
  try {
    console.log("‚ñ∂Ô∏è toggleAlbumInLibrary called with:", req.body);

    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º req.user.id
    const userId = req.user?.id;
    console.log("UserId from req.user:", userId); // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    const { albumId } = req.body;

    if (!userId || !albumId) {
      return res.status(400).json({ message: "Missing userId or albumId" });
    }

    if (!mongoose.Types.ObjectId.isValid(albumId)) {
      return res.status(400).json({ message: "Invalid albumId format" });
    }

    const library = await Library.findOneAndUpdate(
      { userId },
      {},
      { upsert: true, new: true }
    );

    const exists = library.albums.some(
      (a) => a.albumId?.toString() === albumId
    );

    if (exists) {
      library.albums = library.albums.filter(
        (a) => a.albumId?.toString() !== albumId
      );
    } else {
      library.albums.push({
        albumId: new mongoose.Types.ObjectId(albumId),
        addedAt: new Date(),
      });
    }

    await library.save();

    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå toggleAlbumInLibrary error:", err);
    next(err);
  }
};

// –¢–æ–≥–≥–ª –ª–∞–π–∫–∞ –ø–µ—Å–Ω–∏ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ likedSongs)
export const toggleSongLikeInLibrary = async (req, res, next) => {
  try {
    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º req.user.id
    const userId = req.user?.id;
    const { songId } = req.body;

    if (!userId || !songId) {
      return res.status(400).json({ message: "Missing userId or songId" });
    }

    if (!mongoose.Types.ObjectId.isValid(songId)) {
      return res.status(400).json({ message: "Invalid songId format" });
    }

    const library = await Library.findOneAndUpdate(
      { userId },
      {},
      { upsert: true, new: true }
    );

    const exists = library.songs.some((s) => s.songId?.toString() === songId);

    if (exists) {
      library.songs = library.songs.filter(
        (s) => s.songId?.toString() !== songId
      );
    } else {
      library.songs.push({
        songId: new mongoose.Types.ObjectId(songId),
        addedAt: new Date(),
      });
    }

    await library.save();

    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå toggleSongLikeInLibrary error:", err);
    next(err);
  }
};
