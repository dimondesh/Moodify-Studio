import { User } from "../models/user.model.js";
import { firebaseAdmin } from "../lib/firebase.js";

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è authCallback
export const syncUserWithDb = async (req, res) => {
  console.log("Start user sync");

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–∞–∫ –≤ protectRoute
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) {
      return res.status(401).json({ error: "Authorization token required" });
    }

    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const decodedToken = await firebaseAdmin.auth().verifyIdToken(token);
    const { uid, email, name, picture } = decodedToken;

    if (!uid || !email) {
      return res.status(400).json({ error: "Token is missing UID or email" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    // –í–Ω–∏–º–∞–Ω–∏–µ: isAdmin –ª—É—á—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ —á–∞—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ user,
    // –∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ checkAdminStatus,
    // –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –º–æ–¥–µ–ª–∏ user, —Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –µ—Å—Ç—å.
    // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã `isAdmin` –±—ã–ª –≤ `user` –æ–±—ä–µ–∫—Ç–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ,
    // –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∞—à–µ–π MongoDB –º–æ–¥–µ–ª–∏ `User`.
    const isAdmin = email === process.env.ADMIN_EMAIL; // This is fine for direct response, but not for nested `user` if not in model

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
    let user = await User.findOne({ firebaseUid: uid });

    if (user) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      console.log("User found, updating data...");
      user.fullName = name || user.fullName;
      user.imageUrl = picture || user.imageUrl;
      // –ï—Å–ª–∏ isAdmin —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–µ–º –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ User, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:
      // user.isAdmin = isAdmin; // <--- uncomment if isAdmin is a field in your User model
      await user.save();
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
      console.log("User not found, creating new user...");
      user = new User({
        firebaseUid: uid,
        email: email,
        fullName: name || "New User",
        imageUrl: picture || "",
        // isAdmin: isAdmin, // <--- uncomment if isAdmin is a field in your User model
      });
      await user.save();
      console.log("New user created successfully");
    }

    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç 'user'
    // –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–º—É, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ useAuthStore.ts
    res.status(200).json({
      message: "User synced successfully", // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ
      user: {
        // <-- –û–±–µ—Ä–Ω—É—Ç–æ –≤ –æ–±—ä–µ–∫—Ç 'user'
        _id: user._id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º _id, –∞ –Ω–µ id
        firebaseUid: user.firebaseUid,
        email: user.email,
        fullName: user.fullName,
        imageUrl: user.imageUrl,
        // –ï—Å–ª–∏ isAdmin —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–µ–º –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ User, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —Å—é–¥–∞:
        // isAdmin: user.isAdmin,
      },
      // isAdmin: isAdmin, // –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å isAdmin –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –≤ user
    });
  } catch (error) {
    console.error("User sync error:", error);
    if (error.code === "auth/id-token-expired") {
      return res
        .status(401)
        .json({ error: "Token expired, please log in again." });
    }
    res
      .status(500)
      .json({ error: "Internal server error", details: error.message });
  }
};
