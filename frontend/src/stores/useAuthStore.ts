/* eslint-disable @typescript-eslint/no-explicit-any */
import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º persist –∏ createJSONStorage
import { axiosInstance } from "../lib/axios";
import { auth, signOut as firebaseSignOut } from "../lib/firebase"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º auth –∏ signOut –∏–∑ firebase

// üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å AuthUser —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MongoDB.
// –û–Ω –≤–∫–ª—é—á–∞–µ—Ç MongoDB _id (–∫–∞–∫ 'id') –∏ Firebase UID (–∫–∞–∫ 'firebaseUid').
interface AuthUser {
  id: string; // MongoDB _id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  firebaseUid: string; // Firebase UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  email: string; // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  fullName: string; // –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB (—á–∞—Å—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç displayName Firebase)
  imageUrl?: string | null; // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ MongoDB (—á–∞—Å—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç photoURL Firebase)
}

// üí° –ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–°: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç Firebase –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ syncUser/fetchUser
// –≠—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç Firebase Auth (e.g., auth.currentUser)
interface FirebaseUserDataForSync {
  uid: string;
  email: string;
  displayName?: string | null;
  photoURL?: string | null;
}

interface AuthStore {
  user: AuthUser | null; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  isAdmin: boolean; // –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
  isLoading: boolean; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  error: string | null; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  // token: string | null; // –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ JWT —Ç–æ–∫–µ–Ω, –µ–≥–æ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–µ—Å—å

  // üí° –°–û–•–†–ê–ù–ï–ù–û: setUser
  setUser: (user: AuthUser | null) => void;

  // üí° –°–û–•–†–ê–ù–ï–ù–û: checkAdminStatus
  checkAdminStatus: () => Promise<void>;

  // üí° –°–û–•–†–ê–ù–ï–ù–û/–ò–ó–ú–ï–ù–ï–ù–û: syncUser (–≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
  // –¢–µ–ø–µ—Ä—å –æ–Ω–∞ —è–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç FirebaseUserDataForSync –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç AuthUser
  syncUser: (userData: FirebaseUserDataForSync) => Promise<void>;

  // üí° –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: fetchUser
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Firebase UID
  // –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –≤–∞—à–µ–π MongoDB.
  // –ï–µ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ AuthProvider –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase.
  fetchUser: (firebaseUid: string) => Promise<void>;

  // üí° –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: logout
  logout: () => Promise<void>;

  // üí° –°–û–•–†–ê–ù–ï–ù–û: reset
  reset: () => void;
}

// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
const getAuthHeaders = async () => {
  const currentUser = auth.currentUser;
  if (!currentUser) return {};
  const token = await currentUser.getIdToken();
  return {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };
};

export const useAuthStore = create<AuthStore>()(
  // üí° –î–û–ë–ê–í–õ–ï–ù–û: persist middleware –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
  persist(
    (set, get) => ({
      user: null,
      isAdmin: false,
      isLoading: false,
      error: null,
      // token: null, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

      // üí° –°–û–•–†–ê–ù–ï–ù–û: setUser (–≤–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      // –¢–µ–ø–µ—Ä—å `user` –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É `AuthUser`
      setUser: (user) => set({ user }),

      // üí° –°–û–•–†–ê–ù–ï–ù–û/–ò–ó–ú–ï–ù–ï–ù–û: syncUser (–≤–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
      // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Firebase —Å –≤–∞—à–∏–º –±—ç–∫–µ–Ω–¥–æ–º (MongoDB)
      // –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å MongoDB _id.
      syncUser: async (userData: FirebaseUserDataForSync) => {
        set({ isLoading: true, error: null }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        try {
          // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±—ç–∫–µ–Ω–¥—É
          const payload = {
            firebaseUid: userData.uid, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Firebase UID
            email: userData.email,
            fullName: userData.displayName, // displayName –∏–∑ Firebase -> fullName –≤ MongoDB
            imageUrl: userData.photoURL, // photoURL –∏–∑ Firebase -> imageUrl –≤ MongoDB
          };

          const headers = await getAuthHeaders();
          const response = await axiosInstance.post(
            "/auth/sync",
            payload,
            headers
          );

          // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ response.data.user
          const syncedUserFromBackend = response.data.user;

          if (
            !syncedUserFromBackend ||
            !syncedUserFromBackend._id ||
            !syncedUserFromBackend.firebaseUid
          ) {
            throw new Error(
              "Backend did not return a valid user with MongoDB ID or Firebase UID."
            );
          }

          // üí° –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç AuthUser –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞
          // –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ—Ä–∞
          set({
            user: {
              id: syncedUserFromBackend._id, // MongoDB _id
              firebaseUid: syncedUserFromBackend.firebaseUid, // Firebase UID
              email: syncedUserFromBackend.email,
              fullName:
                syncedUserFromBackend.fullName || syncedUserFromBackend.email, // Fallback
              imageUrl: syncedUserFromBackend.imageUrl || null, // Fallback
            },
            isLoading: false,
            error: null,
          });
        } catch (error: any) {
          console.error("Sync error:", error);
          set({
            error: error.response?.data?.message || "Failed to sync user",
            isLoading: false,
            user: null, // –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          });
        }
      },

      // üí° –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: fetchUser (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç syncUser)
      // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ App.tsx –∏–ª–∏ AuthProvider
      fetchUser: async (firebaseUid: string) => {
        set({ isLoading: true, error: null });
        try {
          const currentUser = auth.currentUser;
          if (!currentUser || currentUser.uid !== firebaseUid) {
            throw new Error(
              "No active Firebase user or UID mismatch for fetchUser."
            );
          }

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º syncUser –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
          await get().syncUser({
            uid: currentUser.uid,
            email: currentUser.email || "", // Email –º–æ–∂–µ—Ç –±—ã—Ç—å null, –Ω–æ –¥–ª—è payload –ª—É—á—à–µ –∏–º–µ—Ç—å —Å—Ç—Ä–æ–∫—É
            displayName: currentUser.displayName,
            photoURL: currentUser.photoURL,
          });

          set({ isLoading: false, error: null });
        } catch (error: any) {
          console.error("Error fetching user data in fetchUser:", error);
          set({
            isLoading: false,
            user: null,
            error: error.message || "Failed to fetch user data.",
          });
        }
      },

      // üí° –°–û–•–†–ê–ù–ï–ù–û: checkAdminStatus (–≤–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      checkAdminStatus: async () => {
        set({ isLoading: true, error: null });
        try {
          const headers = await getAuthHeaders();
          const response = await axiosInstance.get("/admin/check", headers);
          set({
            isAdmin: response.data.isAdmin,
            isLoading: false,
            error: null,
          });
        } catch (error: any) {
          console.error("Admin check error:", error);
          set({
            isAdmin: false,
            error: error.response?.data?.message || "Admin check failed",
            isLoading: false,
          });
        }
      },

      // üí° –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: logout
      logout: async () => {
        set({ isLoading: true, error: null });
        try {
          // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–∑–æ–≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
          // await axiosInstance.post("/auth/logout");

          // –í—ã—Ö–æ–¥ –∏–∑ Firebase Authentication
          await firebaseSignOut(auth);
          console.log("Firebase user signed out.");

          // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ—Ä–∞
          set({ user: null, isAdmin: false, isLoading: false, error: null });
          // –ï—Å–ª–∏ –≤—ã —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω, –µ–≥–æ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å:
          // set({ user: null, isAdmin: false, isLoading: false, error: null, token: null });
        } catch (error: any) {
          console.error("Logout error:", error);
          set({
            isLoading: false,
            error: error.message || "Logout failed", // –ò—Å–ø–æ–ª—å–∑—É–µ–º error.message –¥–ª—è –æ—à–∏–±–æ–∫ Firebase
          });
        }
      },

      // üí° –°–û–•–†–ê–ù–ï–ù–û: reset (–≤–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      reset: () => {
        set({ user: null, isAdmin: false, isLoading: false, error: null });
      },
    }),
    {
      name: "auth-storage", // –ò–º—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
      storage: createJSONStorage(() => localStorage), // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ localStorage
      // üí° partialize: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω –≤ JSON
      partialize: (state) => ({
        user: state.user,
        // token: state.token, // –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
      }),
    }
  )
);
